{"version":3,"sources":["inc/dispatcher.js","stores/DataStore.js","components/Item.js","actions/DataActions.js","components/List.js","components/MapItem.js","components/App.js","index.js"],"names":["dispatcher","Dispatcher","dataStore","DataStore","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","current","country","city","company","location","constructData","clients","data","_this2","items","Map","locations","i","length","has","Country","get","City","companies","push","CompanyName","set","value","id","Id","address","Address","postal","PostalCode","toConsumableArray","sort","a","b","size","forEach","cities","countryName","newItem","entries","keys","next","setInitCityState","setInitCompanyState","action","type","emit","EventEmitter","register","handleActions","bind","Item","props","getItemsOf","assertThisInitialized","name","dispatch","console","log","className","react_default","createElement","onClick","Component","List","listItems","map","item","components_Item","key","title","MapItem","geoCodeUrl","mapsUrl","apiKey","url","concat","fetch","then","res","json","results","geoCode","geometry","initMap","catch","err","window","google","maps","document","getElementById","center","zoom","Marker","position","index","script","src","async","defer","after","loadScript","loadMap","getLocation","App","state","countries","on","setState","getCountries","getCities","getCompanies","components_List","components_MapItem","ReactDOM","render","components_App"],"mappings":"07pBACeA,EAAA,UAAIC,oBCmJbC,EAAY,gBA9IhB,SAAAC,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,QAAU,CACbC,QAAS,GACTC,KAAM,GACNC,QAAS,GACTC,SAAU,IAEZX,EAAKY,cAAcC,KARPb,6EAeAc,GAAK,IAAAC,EAAAZ,KAEjBA,KAAKa,MAAQ,IAAIC,IACjBd,KAAKe,UAAY,IAAID,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAKM,OAAQD,IAAK,CAIpC,GAAGhB,KAAKa,MAAMK,IAAIP,EAAKK,GAAGG,SAExB,GAAGnB,KAAKa,MAAMO,IAAIT,EAAKK,GAAGG,SAASD,IAAIP,EAAKK,GAAGK,MAAO,CAEpD,IAAIC,EAAatB,KAAKa,MAAMO,IAAIT,EAAKK,GAAGG,SAAUC,IAAIT,EAAKK,GAAGK,MAC9DC,EAAUC,KAAKZ,EAAKK,GAAGQ,aACvBxB,KAAKa,MAAMO,IAAIT,EAAKK,GAAGG,SAASM,IAAId,EAAKK,GAAGK,KAAMC,QAGlDtB,KAAKa,MAAMO,IAAIT,EAAKK,GAAGG,SAASM,IAAId,EAAKK,GAAGK,KAAM,CAAEV,EAAKK,GAAGQ,kBAEzD,CAEL,IAAIE,GAAS,IAAIZ,KAAMW,IAAId,EAAKK,GAAGK,KAAM,CAAEV,EAAKK,GAAGQ,cACnDxB,KAAKa,MAAMY,IAAId,EAAKK,GAAGG,QAASO,GAIlC1B,KAAKe,UAAUU,IAAId,EAAKK,GAAGQ,YAAa,CACtCG,GAAIhB,EAAKK,GAAGY,GACZvB,QAASM,EAAKK,GAAGG,QACjBb,KAAMK,EAAKK,GAAGK,KACdQ,QAASlB,EAAKK,GAAGc,QACjBC,OAAQpB,EAAKK,GAAGgB,aAKpBhC,KAAKa,MAAQ,IAAIC,IAAIhB,OAAAmC,EAAA,EAAAnC,CAAIE,KAAKa,OAAOqB,KAAM,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAGC,KAAOF,EAAE,GAAGE,QAEtErC,KAAKa,MAAMyB,QAAQ,SAACC,EAAQC,EAAanC,GAEvCkC,EAAOD,QAAS,SAAChB,GACfA,EAAUY,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,MAG/B,IAAIM,EAAU,IAAI3B,IAAIhB,OAAAmC,EAAA,EAAAnC,CAAKyC,EAAOG,WAAYR,KAAM,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAGnB,OAASkB,EAAE,GAAGlB,UACjFL,EAAKC,MAAMY,IAAIe,EAAaC,KAG9BzC,KAAKI,QAAQC,QAAUL,KAAKa,MAAM8B,OAAOC,OAAOlB,MAChD1B,KAAK6C,mBACL7C,KAAK8C,iEAOL9C,KAAKI,QAAQE,KAAON,KAAKa,MAAMO,IAAIpB,KAAKI,QAAQC,SAASsC,OAAOC,OAAOlB,oDAMvE1B,KAAKI,QAAQG,QAAUP,KAAKa,MAAMO,IAAIpB,KAAKI,QAAQC,SAASe,IAAIpB,KAAKI,QAAQE,MAAM,GACnFN,KAAKI,QAAQI,SAAWR,KAAKe,UAAUK,IAAIpB,KAAKI,QAAQG,gDAOxD,OAAOT,OAAAmC,EAAA,EAAAnC,CAAIE,KAAKa,MAAM8B,4CAOtB,OAAO7C,OAAAmC,EAAA,EAAAnC,CAAIE,KAAKa,MAAMO,IAAIpB,KAAKI,QAAQC,SAASsC,+CAQhD,OADW3C,KAAKa,MAAMO,IAAIpB,KAAKI,QAAQC,SAC3Be,IAAIpB,KAAKI,QAAQE,4CAM7B,OAAON,KAAKe,UAAUK,IAAIpB,KAAKI,QAAQG,+CAO3BwC,GACZ,OAAQA,EAAOC,MACb,IAAK,OACHhD,KAAKiD,KAAK,QACV,MACF,IAAK,aACHjD,KAAKI,QAAQC,QAAU0C,EAAOpC,KAC9BX,KAAK6C,mBACL7C,KAAK8C,sBACL9C,KAAKiD,KAAK,cACVjD,KAAKiD,KAAK,iBACVjD,KAAKiD,KAAK,mBACV,MACF,IAAK,gBACHjD,KAAKI,QAAQE,KAAOyC,EAAOpC,KAC3BX,KAAK8C,sBACL9C,KAAKiD,KAAK,iBACVjD,KAAKiD,KAAK,mBACV,MACF,IAAK,kBACHjD,KAAKI,QAAQG,QAAUwC,EAAOpC,KAC9BX,KAAKiD,KAAK,2BAzIMC,iBAiJxBzD,EAAW0D,SAASxD,EAAUyD,cAAcC,KAAK1D,IAClCA,mBCzGA2D,qBAvCb,SAAAA,EAAYC,GAAM,IAAA1D,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,IAChBzD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwD,GAAAnD,KAAAH,KAAMuD,KACDC,WAAa3D,EAAK2D,WAAWH,KAAhBvD,OAAA2D,EAAA,EAAA3D,QAAA2D,EAAA,EAAA3D,CAAAD,KAFFA,0EASPmD,EAAMU,GACf,OAAQV,GACN,IAAK,UCTe3C,EDUIqD,ECT5BjE,EAAWkE,SAAS,CAClBX,KAAM,aACNrC,KAAMN,IDQF,MACF,IAAK,OCLkBC,EDMIoD,ECL/BjE,EAAWkE,SAAS,CAClBX,KAAM,gBACNrC,KAAML,IDIF,MACF,IAAK,UCDiBC,EDEImD,ECD9BjE,EAAWkE,SAAS,CAClBX,KAAM,kBACNrC,KAAMJ,IDAF,MACF,QAASqD,QAAQC,IAAI,gBCJpB,IAAqBtD,EAPCD,EAPHD,mCDsBf,IAAAO,EAAAZ,KACD8D,EAAa9D,KAAKuD,MAAMG,OAAS9D,EAAUQ,QAAQJ,KAAKuD,MAAMP,MAAS,gBAAkB,OAC/F,OACEe,EAAA5B,EAAA6B,cAAA,MAAIF,UAAWA,EACZG,QAAS,WACJrD,EAAK2C,MAAMG,OAAS9D,EAAUQ,QAAQQ,EAAK2C,MAAMP,OAClDpC,EAAK4C,WAAW5C,EAAK2C,MAAMP,KAAMpC,EAAK2C,MAAMG,QAGhD1D,KAAKuD,MAAMG,aAlCDQ,cEWJC,0LAXJ,IAAAtE,EAAAG,KACDoE,EAAYpE,KAAKuD,MAAM1C,MAAMwD,IAAK,SAAAC,GAAI,OAC1CP,EAAA5B,EAAA6B,cAACO,EAAD,CAAMT,UAAU,OAAOU,IAAKF,EAAMtB,KAAMnD,EAAK0D,MAAMP,KAAMU,KAAMY,MACjE,OACEP,EAAA5B,EAAA6B,cAAA,OAAKF,UAAU,aACbC,EAAA5B,EAAA6B,cAAA,MAAIF,UAAU,SAAS9D,KAAKuD,MAAMkB,OAClCV,EAAA5B,EAAA6B,cAAA,MAAIF,UAAU,QAAQM,WAPXF,oBC+EJQ,kBA/Eb,SAAAA,EAAYnB,GAAM,IAAA1D,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0E,IAChB7E,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4E,GAAAvE,KAAAH,KAAMuD,KACDoB,WAAa,oDAClB9E,EAAK+E,QAAU,0CACf/E,EAAKgF,OAAS,0CAJEhF,6EAUL,IAAAe,EAAAZ,KACLW,EAAOX,KAAKuD,MAAM/C,SAClBsE,EAAG,GAAAC,OAAM/E,KAAK2E,WAAX,SAAAI,OAA6B/E,KAAK6E,OAAlC,aAAAE,OAAoDpE,EAAKkB,QAAzD,KAAAkD,OAAoEpE,EAAKL,KAAzE,KAAAyE,OAAiFpE,EAAKN,QAAtF,KAAA0E,OAAiGpE,EAAKoB,QAE/GiD,MAAMF,GACLG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACH,GAAIA,EAAIE,QAAQnE,OAAS,EAAE,CACxB,IAAMoE,EAAUH,EAAIE,QAAQ,GAAGE,SAAS9E,SACxCI,EAAK2E,QAAQF,MAGlBG,MAAM,SAAAC,GAAG,OAAI7B,QAAQC,IAAI4B,qCAOpBjF,GACN,IAAM6D,EAAM,IAAIqB,OAAOC,OAAOC,KAAK9E,IAAI4E,OAAOG,SAASC,eAAe,OAAQ,CAC9EC,OAAQvF,EACRwF,KAAM,KAGS,IAAIN,OAAOC,OAAOC,KAAKK,OAAO,CAC3CC,SAAU1F,EACV6D,IAAKA,sCAOPqB,OAAOH,QAAUvF,KAAKuF,QA0B1B,SAAoBT,GAClB,IAAIqB,EAAQT,OAAOG,SAASC,eAAe,QACvCM,EAASV,OAAOG,SAAS7B,cAAc,UAC3CoC,EAAOC,IAAMvB,EACbsB,EAAOE,OAAQ,EACfF,EAAOG,OAAQ,EACfJ,EAAMK,MAAMJ,GA/BVK,CAAU,GAAA1B,OAAI/E,KAAK4E,QAAT,SAAAG,OAAwB/E,KAAK6E,qDAIvC7E,KAAK0G,uDAIL1G,KAAK2G,+CAIL,OACE5C,EAAA5B,EAAA6B,cAAA,OAAKF,UAAU,iBACbC,EAAA5B,EAAA6B,cAAA,MAAIF,UAAU,SAAd,OACAC,EAAA5B,EAAA6B,cAAA,OAAKrC,GAAG,gBA7DMuC,aC4DP0C,qBAtDb,SAAAA,EAAYrD,GAAM,IAAA1D,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4G,IAChB/G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8G,GAAAzG,KAAAH,KAAMuD,KACDsD,MAAQ,CACXC,UAAW,GACXvE,OAAQ,GACRjB,UAAW,GACXd,SAAU,IANIX,mFAUC,IAAAe,EAAAZ,KAEjBJ,EAAUmH,GAAG,OAAQ,WACnBnG,EAAKoG,SAAS,CACZF,UAAWlH,EAAUqH,eACrB1E,OAAQ3C,EAAUsH,YAClB5F,UAAW1B,EAAUuH,eACrB3G,SAAUZ,EAAU+G,kBAIxB/G,EAAUmH,GAAG,aAAc,SAACrF,GACxBd,EAAKoG,SAAS,CACZzE,OAAQ3C,EAAUsH,gBAIxBtH,EAAUmH,GAAG,gBAAiB,SAACrF,GAC7Bd,EAAKoG,SAAS,CACZ1F,UAAW1B,EAAUuH,mBAKzBvH,EAAUmH,GAAG,kBAAmB,SAACrF,GAC/Bd,EAAKoG,SAAS,CACZxG,SAAUZ,EAAU+G,kBH1C1BlH,EAAWkE,SAAS,CAClBX,KAAM,0CGiDN,OACEe,EAAA5B,EAAA6B,cAAA,OAAKF,UAAU,OACbC,EAAA5B,EAAA6B,cAACoD,EAAD,CAAM3C,MAAM,YAAYzB,KAAK,UAAUnC,MAAOb,KAAK6G,MAAMC,YACzD/C,EAAA5B,EAAA6B,cAACoD,EAAD,CAAM3C,MAAM,SAASzB,KAAK,OAAOnC,MAAOb,KAAK6G,MAAMtE,SACnDwB,EAAA5B,EAAA6B,cAACoD,EAAD,CAAM3C,MAAM,YAAYzB,KAAK,UAAUnC,MAAOb,KAAK6G,MAAMvF,YACzDyC,EAAA5B,EAAA6B,cAACqD,EAAD,CAAS7G,SAAUR,KAAK6G,MAAMrG,mBAlDpB0D,cCHlBoD,IAASC,OAAOxD,EAAA5B,EAAA6B,cAACwD,EAAD,MAAS3B,SAASC,eAAe","file":"static/js/main.d31e5e39.chunk.js","sourcesContent":["import { Dispatcher } from 'flux';\nexport default new Dispatcher();\n","import { EventEmitter } from 'events';\nimport dispatcher from '../inc/dispatcher';\nimport * as clients from '../inc/clients.json';\n\nclass DataStore extends EventEmitter {\n\n  constructor() {\n    super();\n    this.current = {\n      country: '',\n      city: '',\n      company: '',\n      location: ''\n    };\n    this.constructData(clients.Customers); //construct raw data\n  }\n\n  /**\n   * constructs the raw data into items map & locations map\n   * @param data: raw data\n   */\n  constructData(data){\n    //initiate the result maps\n    this.items = new Map();\n    this.locations = new Map();\n    for (var i = 0; i < data.length; i++) {\n      // console.log(i);\n      // console.log(data[i]);\n      //if country already exists\n      if(this.items.has(data[i].Country)) {\n        //if city already exists\n        if(this.items.get(data[i].Country).has(data[i].City)) {\n          //add company\n          let companies = (this.items.get(data[i].Country)).get(data[i].City);\n          companies.push(data[i].CompanyName);\n          this.items.get(data[i].Country).set(data[i].City, companies);\n        } else {\n          //add city & company\n          this.items.get(data[i].Country).set(data[i].City, [ data[i].CompanyName ]);\n        }\n      } else {\n        //set new item entry\n        let value =  new Map().set(data[i].City, [ data[i].CompanyName ]);\n        this.items.set(data[i].Country, value);\n      }\n\n      //set location of company\n      this.locations.set(data[i].CompanyName, {\n        id: data[i].Id,\n        country: data[i].Country,\n        city: data[i].City,\n        address: data[i].Address,\n        postal: data[i].PostalCode,\n      });\n    }\n    //sort data\n    //sort countries by ascending order\n    this.items = new Map([...this.items].sort( (a, b) => b[1].size - a[1].size ));\n    //sort cities by number of companies\n    this.items.forEach((cities, countryName, country) => {\n      // sort companies in alphabetic order\n      cities.forEach( (companies) => {\n        companies.sort((a, b) => b - a );\n      });\n      //sort cities by ascending order\n      let newItem = new Map([...(cities.entries())].sort( (a, b) => b[1].length - a[1].length ));\n      this.items.set(countryName, newItem);\n    });\n    //assign current state\n    this.current.country = this.items.keys().next().value;\n    this.setInitCityState();\n    this.setInitCompanyState();\n}\n\n  /**\n   * determine current city\n   */\n  setInitCityState(){\n    this.current.city = this.items.get(this.current.country).keys().next().value;\n  }\n  /**\n   * determine current comapny and location\n   */\n  setInitCompanyState(){\n    this.current.company = this.items.get(this.current.country).get(this.current.city)[0];\n    this.current.location = this.locations.get(this.current.company);\n  }\n\n  /**\n   * get all countries\n   */\n  getCountries(){\n    return [...this.items.keys()];\n  }\n\n  /**\n   * get cities of current country\n   */\n  getCities(){\n    return [...this.items.get(this.current.country).keys()]\n  }\n\n  /**\n   * get companies of current city\n   */\n  getCompanies(){\n    let item = this.items.get(this.current.country);\n    return item.get(this.current.city);\n  }\n  /**\n   * get location of current city\n   */\n  getLocation(){\n    return this.locations.get(this.current.company);\n  }\n\n  /**\n   * handle actions recieved from DataActions and emit proper events\n   * @param action object whith proper action information\n   */\n  handleActions(action){\n    switch (action.type) {\n      case 'INIT':\n        this.emit('init');\n        break;\n      case 'GET_CITIES':\n        this.current.country = action.data; // set current country\n        this.setInitCityState();\n        this.setInitCompanyState();\n        this.emit('get_cities'); //pass country name\n        this.emit('get_companies');\n        this.emit('get_company_loc');\n        break;\n      case 'GET_COMPANIES':\n        this.current.city = action.data;\n        this.setInitCompanyState();\n        this.emit('get_companies');\n        this.emit('get_company_loc');\n        break;\n      case 'GET_COMPANY_LOC':\n        this.current.company = action.data;\n        this.emit('get_company_loc');\n        break;\n      default:\n    }\n  }\n\n}\nconst dataStore = new DataStore();\ndispatcher.register(dataStore.handleActions.bind(dataStore));\nexport default dataStore;\n","import React, { Component } from 'react';\nimport  DataStore  from '../stores/DataStore';\nimport  * as DataActions  from '../actions/DataActions';\nimport './styles/Item.css';\n\nclass Item extends Component {\n  constructor(props){\n    super(props);\n    this.getItemsOf = this.getItemsOf.bind(this);\n  }\n\n  /**\n   * @param type: proper case type\n   * @param name: name of the item\n   */\n  getItemsOf(type, name){\n    switch (type) {\n      case 'country':\n        DataActions.getCities(name);\n        break;\n      case 'city':\n        DataActions.getCompanies(name);\n        break;\n      case 'company':\n        DataActions.getLocation(name);\n        break;\n      default: console.log('NO SUCH TYPE');\n    }\n  }\n\n  render() {\n    const className = (this.props.name === DataStore.current[this.props.type]) ? 'item selected' : 'item';\n    return(\n      <li className={className}\n         onClick={() => {\n           if(this.props.name !== DataStore.current[this.props.type]){\n             this.getItemsOf(this.props.type, this.props.name);\n           }\n         }}>\n        {this.props.name}\n      </li>\n    );\n  }\n}\n\nexport default Item;\n","import dispatcher from '../inc/dispatcher';\n\nexport function init(){\n  dispatcher.dispatch({\n    type: 'INIT'\n  });\n}\n\nexport function getCities(country){\n  dispatcher.dispatch({\n    type: 'GET_CITIES',\n    data: country\n  });\n}\n\nexport function getCompanies(city){\n  dispatcher.dispatch({\n    type: 'GET_COMPANIES',\n    data: city\n  });\n}\n\nexport function getLocation(company){\n  dispatcher.dispatch({\n    type: 'GET_COMPANY_LOC',\n    data: company\n  });\n}\n","import React, { Component } from 'react';\nimport Item from './Item';\nimport './styles/List.css';\n\nclass List extends Component {\n  render() {\n    const listItems = this.props.items.map( item =>\n      <Item className='item' key={item} type={this.props.type} name={item}  /> );\n    return (\n      <div className='container'>\n        <h3 className='title'>{this.props.title}</h3>\n        <ul className='list'>{listItems}</ul>\n      </div>\n    );\n  }\n}\nexport default List;\n","import React, { Component } from 'react';\nimport './styles/MapItem.css';\n\nclass MapItem extends Component {\n  constructor(props){\n    super(props)\n    this.geoCodeUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n    this.mapsUrl = 'https://maps.googleapis.com/maps/api/js';\n    this.apiKey = 'AIzaSyCMx4iDaFk3yaGp6YZhrQK1bn-aYi_5SLg';\n  }\n  /**\n   * get the current company location and display a proper map by location\n   * @return {[type]} [description]\n   */\n  getLocation(){\n    const data = this.props.location;\n    const url = `${this.geoCodeUrl}?key=${this.apiKey}&address=${data.address},${data.city},${data.country},${data.postal}`;\n    //fetch map geocode\n    fetch(url)\n    .then(res => res.json())\n    .then(res => {\n       if (res.results.length > 0){\n          const geoCode = res.results[0].geometry.location;\n          this.initMap(geoCode);\n       }\n    })\n    .catch(err => console.log(err));\n  }\n\n  /**\n   * initiate map & marker\n   * @param location current company location\n   */\n  initMap(location) {\n    const map = new window.google.maps.Map(window.document.getElementById('map'), {\n    center: location,\n    zoom: 12\n  });\n\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map\n    });\n  }\n  /**\n   * load map for view\n   */\n  loadMap() {\n    window.initMap = this.initMap; //bind initMap to global object\n    loadScript(`${this.mapsUrl}?key=${this.apiKey}`);\n  }\n\n  componentDidMount() {\n    this.loadMap();\n  }\n\n  componentDidUpdate(){\n    this.getLocation();\n  }\n\n  render() {\n    return (\n      <div className='map_container'>\n        <h3 className='title'>Map</h3>\n        <div id='map'></div>\n      </div>\n      );\n    }\n  }\n\n/**\n * create & append the maps script to the global object\n * @param url map url\n */\nfunction loadScript(url) {\n  let index = window.document.getElementById('root'),\n      script = window.document.createElement('script');\n  script.src = url;\n  script.async = true;\n  script.defer = true;\n  index.after(script);\n}\n\nexport default MapItem;\n","import React, { Component } from 'react';\nimport DataStore from '../stores/DataStore';\nimport  * as DataActions  from '../actions/DataActions';\n\nimport List from './List';\nimport MapItem from './MapItem';\nimport './styles/App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      countries: [],\n      cities: [],\n      companies: [],\n      location: {}\n    };\n  }\n\n  componentDidMount(){\n    //set event listeners\n    DataStore.on('init', () => {\n      this.setState({\n        countries: DataStore.getCountries(),\n        cities: DataStore.getCities(),\n        companies: DataStore.getCompanies(),\n        location: DataStore.getLocation()\n      });\n    });\n\n    DataStore.on('get_cities', (value) => {\n        this.setState({\n          cities: DataStore.getCities()\n        });\n    });\n\n    DataStore.on('get_companies', (value) => {\n      this.setState({\n        companies: DataStore.getCompanies()\n      });\n\n    });\n\n    DataStore.on('get_company_loc', (value) => {\n      this.setState({\n        location: DataStore.getLocation()\n      });\n    });\n    // init data\n    DataActions.init();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <List title='Countries' type='country' items={this.state.countries} />\n        <List title='Cities' type='city' items={this.state.cities} />\n        <List title='Companies' type='company' items={this.state.companies} />\n        <MapItem location={this.state.location}></MapItem>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}