{"version":3,"sources":["inc/dispatcher.js","stores/DataStore.js","components/Item.js","actions/DataActions.js","components/List.js","components/MapItem.js","components/App.js","index.js"],"names":["dispatcher","Dispatcher","dataStore","DataStore","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","current","country","city","company","location","data","_this2","items","Map","locations","i","length","has","Country","get","City","companies","push","CompanyName","set","value","id","Id","address","Address","postal","PostalCode","toConsumableArray","sort","a","b","size","forEach","cities","countryName","newItem","entries","keys","next","setInitCityState","setInitCompanyState","_this3","req","Request","method","headers","Headers","Content-type","fetch","then","res","json","constructData","Customers","emit","catch","err","console","log","action","type","EventEmitter","register","handleActions","bind","Item","props","getItemsOf","assertThisInitialized","name","dispatch","className","react_default","createElement","onClick","Component","List","listItems","map","item","components_Item","key","title","MapItem","geoCodeUrl","mapsUrl","apiKey","url","concat","results","initMap","geometry","window","google","maps","document","getElementById","center","zoom","Marker","position","index","script","src","async","defer","after","loadScript","loadMap","getLocation","App","state","countries","on","setState","getCountries","getCities","getCompanies","components_List","components_MapItem","ReactDOM","render","components_App"],"mappings":"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","file":"static/js/main.dda4900d.chunk.js","sourcesContent":["import { Dispatcher } from 'flux';\nexport default new Dispatcher();\n","import { EventEmitter } from 'events';\nimport dispatcher from '../inc/dispatcher';\n\nclass DataStore extends EventEmitter {\n\n  constructor() {\n    super();\n    this.fetchData(); //fetch initial data\n    this.current = {\n      country: '',\n      city: '',\n      company: '',\n      location: ''\n    };\n  }\n  /**\n   * constructs the raw data into items map & locations map\n   * @param data: raw data\n   */\n  constructData(data){\n    //initiate the result maps\n    this.items = new Map();\n    this.locations = new Map();\n    for (var i = 0; i < data.length; i++) {\n      //if country already exists\n      if(this.items.has(data[i].Country)) {\n        //if city already exists\n        if(this.items.get(data[i].Country).has(data[i].City)) {\n          //add company\n          let companies = (this.items.get(data[i].Country)).get(data[i].City);\n          companies.push(data[i].CompanyName);\n          this.items.get(data[i].Country).set(data[i].City, companies);\n        } else {\n          //add city & company\n          this.items.get(data[i].Country).set(data[i].City, [ data[i].CompanyName ]);\n        }\n      } else {\n        //set new item entry\n        let value =  new Map().set(data[i].City, [ data[i].CompanyName ]);\n        this.items.set(data[i].Country, value);\n      }\n      //set location of company\n      this.locations.set(data[i].CompanyName, {\n        id: data[i].Id,\n        country: data[i].Country,\n        city: data[i].City,\n        address: data[i].Address,\n        postal: data[i].PostalCode,\n      });\n    }\n    //sort data\n    //sort countries by ascending order\n    this.items = new Map([...this.items].sort( (a, b) => b[1].size - a[1].size ));\n    //sort cities by number of companies\n    this.items.forEach((cities, countryName, country) => {\n      // sort companies in alphabetic order\n      cities.forEach( (companies) => {\n        companies.sort((a, b) => b - a );\n      });\n      //sort cities by ascending order\n      let newItem = new Map([...(cities.entries())].sort( (a, b) => b[1].length - a[1].length ));\n      this.items.set(countryName, newItem);\n    });\n    //assign current state\n    this.current.country = this.items.keys().next().value;\n    this.setInitCityState();\n    this.setInitCompanyState();\n}\n\n  /**\n   * determine current city\n   */\n  setInitCityState(){\n    this.current.city = this.items.get(this.current.country).keys().next().value;\n  }\n  /**\n   * determine current comapny and location\n   */\n  setInitCompanyState(){\n    this.current.company = this.items.get(this.current.country).get(this.current.city)[0];\n    this.current.location = this.locations.get(this.current.company);\n  }\n\n  /**\n   * get all countries\n   */\n  getCountries(){\n    return [...this.items.keys()];\n  }\n\n  /**\n   * get cities of current country\n   */\n  getCities(){\n    return [...this.items.get(this.current.country).keys()]\n  }\n\n  /**\n   * get companies of current city\n   */\n  getCompanies(){\n    let item = this.items.get(this.current.country);\n    return item.get(this.current.city);\n  }\n  /**\n   * get location of current city\n   */\n  getLocation(){\n    return this.locations.get(this.current.company);\n  }\n\n  /**\n   * [fetchData description]\n   * @return {[type]} [description]\n   */\n  fetchData(){\n    const req = new Request('/clients.json', {\n      method: 'GET',\n      headers : new Headers({\n        'Content-type': 'application/json'\n      })\n    });\n    fetch(req)\n    .then(res => res.json())\n    .then( items => {\n      this.constructData(items.Customers); //construct raw data\n      this.emit('init');//init application data\n    })\n    .catch( err => console.log(err) );\n  }\n\n\n  /**\n   * handle actions recieved from DataActions and emit proper events\n   * @param action object whith proper action information\n   */\n  handleActions(action){\n    switch (action.type) {\n      case 'GET_CITIES':\n        this.current.country = action.data; // set current country\n        this.setInitCityState();\n        this.setInitCompanyState();\n        this.emit('get_cities'); //pass country name\n        this.emit('get_companies');\n        this.emit('get_company_loc');\n        break;\n      case 'GET_COMPANIES':\n        this.current.city = action.data;\n        this.setInitCompanyState();\n        this.emit('get_companies');\n        this.emit('get_company_loc');\n        break;\n      case 'GET_COMPANY_LOC':\n        this.current.company = action.data;\n        this.emit('get_company_loc');\n        break;\n      default:\n    }\n  }\n\n}\nconst dataStore = new DataStore();\ndispatcher.register(dataStore.handleActions.bind(dataStore));\nexport default dataStore;\n","import React, { Component } from 'react';\nimport  DataStore  from '../stores/DataStore';\nimport  * as DataActions  from '../actions/DataActions';\nimport './styles/Item.css';\n\nclass Item extends Component {\n  constructor(props){\n    super(props);\n    this.getItemsOf = this.getItemsOf.bind(this);\n  }\n\n  /**\n   * @param type: proper case type\n   * @param name: name of the item\n   */\n  getItemsOf(type, name){\n    switch (type) {\n      case 'country':\n        DataActions.getCities(name);\n        break;\n      case 'city':\n        DataActions.getCompanies(name);\n        break;\n      case 'company':\n        DataActions.getLocation(name);\n        break;\n      default: console.log('NO SUCH TYPE');\n    }\n  }\n\n  render() {\n    const className = (this.props.name === DataStore.current[this.props.type]) ? 'item selected' : 'item';\n    return(\n      <li className={className}\n         onClick={() => {\n           if(this.props.name !== DataStore.current[this.props.type]){\n             this.getItemsOf(this.props.type, this.props.name);\n           }\n         }}>\n        {this.props.name}\n      </li>\n    );\n  }\n}\n\nexport default Item;\n","import dispatcher from '../inc/dispatcher';\n\nexport function getCities(country){\n  dispatcher.dispatch({\n    type: 'GET_CITIES',\n    data: country\n  });\n}\n\nexport function getCompanies(city){\n  dispatcher.dispatch({\n    type: 'GET_COMPANIES',\n    data: city\n  });\n}\n\nexport function getLocation(company){\n  dispatcher.dispatch({\n    type: 'GET_COMPANY_LOC',\n    data: company\n  });\n}\n","import React, { Component } from 'react';\nimport Item from './Item';\nimport './styles/List.css';\n\nclass List extends Component {\n  render() {\n    const listItems = this.props.items.map( item =>\n      <Item className='item' key={item} type={this.props.type} name={item}  /> );\n    return (\n      <div className='container'>\n        <h3 className='title'>{this.props.title}</h3>\n        <ul className='list'>{listItems}</ul>\n      </div>\n    );\n  }\n}\nexport default List;\n","import React, { Component } from 'react';\nimport './styles/MapItem.css';\n\nclass MapItem extends Component {\n  constructor(props){\n    super(props)\n    this.geoCodeUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n    this.mapsUrl = 'https://maps.googleapis.com/maps/api/js';\n    this.apiKey = 'AIzaSyCMx4iDaFk3yaGp6YZhrQK1bn-aYi_5SLg';\n  }\n  /**\n   * get the current company location and display a proper map by location\n   * @return {[type]} [description]\n   */\n  getLocation(){\n    const data = this.props.location;\n    const url = `${this.geoCodeUrl}?key=${this.apiKey}&address=${data.address},${data.city},${data.country},${data.postal}`;\n    //fetch map geocode\n    fetch(url)\n    .then(res => res.json())\n    .then(res => {\n       if (res.results.length > 0){\n            this.initMap(res.results[0].geometry.location);\n       }\n    })\n    .catch(err => console.log(err));\n  }\n\n  /**\n   * initiate map & marker\n   * @param location current company location\n   */\n  initMap(location) {\n    const map = new window.google.maps.Map(window.document.getElementById('map'), {\n    center: location,\n    zoom: 12\n  });\n\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map\n    });\n  }\n  /**\n   * load map for view\n   */\n  loadMap() {\n    window.initMap = this.initMap; //bind initMap to global object\n    loadScript(`${this.mapsUrl}?key=${this.apiKey}`);\n  }\n\n  componentDidMount() {\n    this.loadMap();\n  }\n\n  componentDidUpdate(){\n    this.getLocation();\n  }\n\n  render() {\n    return (\n      <div className='map_container'>\n        <h3 className='title'>Map</h3>\n        <div id='map'></div>\n      </div>\n      );\n    }\n  }\n\n/**\n * create & append the maps script to the global object\n * @param url map url\n */\nfunction loadScript(url) {\n  let index = window.document.getElementById('root'),\n      script = window.document.createElement('script');\n  script.src = url;\n  script.async = true;\n  script.defer = true;\n  index.after(script);\n}\n\nexport default MapItem;\n","import React, { Component } from 'react';\nimport DataStore from '../stores/DataStore';\nimport List from './List';\nimport MapItem from './MapItem';\nimport './styles/App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      countries: [],\n      cities: [],\n      companies: [],\n      location: {}\n    };\n  }\n\n  componentDidMount(){\n    //set event listeners\n    DataStore.on('init', () => {\n      this.setState({\n        countries: DataStore.getCountries(),\n        cities: DataStore.getCities(),\n        companies: DataStore.getCompanies(),\n        location: DataStore.getLocation()\n      });\n    });\n\n    DataStore.on('get_cities', (value) => {\n        this.setState({\n          cities: DataStore.getCities()\n        });\n    });\n\n    DataStore.on('get_companies', (value) => {\n      this.setState({\n        companies: DataStore.getCompanies()\n      });\n\n    });\n\n    DataStore.on('get_company_loc', (value) => {\n      this.setState({\n        location: DataStore.getLocation()\n      });\n    });\n    // initial data\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <List title='Countries' type='country' items={this.state.countries} />\n        <List title='Cities' type='city' items={this.state.cities} />\n        <List title='Companies' type='company' items={this.state.companies} />\n        <MapItem location={this.state.location}></MapItem>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}